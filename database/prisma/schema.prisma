generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin", "darwin-arm64", "linux-musl", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Resident {
  id              Int               @id @default(autoincrement())
  cpf             String            @unique
  rg              String            @unique
  name            String
  contact_phone   String            @unique
  birthday        DateTime
  url_image       String?
  created_at      DateTime          @default(now())
  updated_at      DateTime?         @updatedAt
  MedicationSheet MedicationSheet[]
}

model Role {
  id       Int        @id @default(autoincrement())
  name     String
  Employee Employee[]
}

model Employee {
  id              Int               @id @default(autoincrement())
  document        String            @unique
  role_id         Int
  Role            Role              @relation(fields: [role_id], references: [id])
  email           String            @unique
  phone           String
  password        String
  name            String
  created_at      DateTime          @default(now())
  updated_at      DateTime?         @updatedAt
  MedicationSheet MedicationSheet[]
}

model PharmacologicalName {
  id         Int        @id @default(autoincrement())
  name       String
  Medicines  Medicine[]
  created_at DateTime   @default(now())
  updated_at DateTime?  @updatedAt
}

model PharmacologicalForm {
  id         Int        @id @default(autoincrement())
  name       String
  Medicines  Medicine[]
  created_at DateTime   @default(now())
  updated_at DateTime?  @updatedAt
}

model Medicine {
  id                      Int                 @id @default(autoincrement())
  name                    String
  id_pharmacological_name Int
  PharmacologicalName     PharmacologicalName @relation(fields: [id_pharmacological_name], references: [id])
  id_pharmacological_form Int
  PharmacologicalForm     PharmacologicalForm @relation(fields: [id_pharmacological_form], references: [id])
  created_at              DateTime            @default(now())
  updated_at              DateTime?           @updatedAt
  Prescription            Prescription[]
}

model MedicationSheet {
  id            Int            @id @default(autoincrement())
  residentId    Int
  Resident      Resident       @relation(fields: [residentId], references: [id])
  prescriptions Prescription[]
  createdBy     Int
  Employee      Employee       @relation(fields: [createdBy], references: [id])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime?      @updatedAt
  observations  String?
}

model Prescription {
  id                  Int             @id @default(autoincrement())
  medicationSheetId   Int
  MedicationSheet     MedicationSheet @relation(fields: [medicationSheetId], references: [id])
  medicineId          Int
  Medicine            Medicine        @relation(fields: [medicineId], references: [id])
  dosage              String
  frequency           String
  startDate           DateTime
  endDate             DateTime
  firstTime           String // "HH:mm"
  createdAt           DateTime        @default(now())
  updatedAt           DateTime?       @updatedAt
}
