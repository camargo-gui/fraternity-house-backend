generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin", "darwin-arm64", "linux-musl", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Resident {
  id              Int               @id @default(autoincrement())
  cpf             String            @unique
  rg              String            @unique
  name            String
  contact_phone   String            @unique
  birthday        DateTime
  url_image       String?
  created_at      DateTime          @default(now())
  updated_at      DateTime?         @updatedAt
  MedicationSheet MedicationSheet[]
  Accompaniments  Accompaniment[]
  Screening       Screening?
}

model Role {
  id       Int        @id @default(autoincrement())
  name     String
  Employee Employee[]
}

model Employee {
  id              Int               @id @default(autoincrement())
  document        String            @unique
  role_id         Int
  Role            Role              @relation(fields: [role_id], references: [id])
  email           String            @unique
  phone           String
  password        String
  name            String
  created_at      DateTime          @default(now())
  updated_at      DateTime?         @updatedAt
  MedicationSheet MedicationSheet[]
  Movimentations  Movimentation[]
  Accompaniments  Accompaniment[]
}

model PharmacologicalName {
  id         Int        @id @default(autoincrement())
  name       String
  Medicines  Medicine[]
  created_at DateTime   @default(now())
  updated_at DateTime?  @updatedAt
}

model PharmacologicalForm {
  id         Int        @id @default(autoincrement())
  name       String
  Medicines  Medicine[]
  created_at DateTime   @default(now())
  updated_at DateTime?  @updatedAt
}

model Medicine {
  id                      Int                 @id @default(autoincrement())
  name                    String
  id_pharmacological_name Int
  PharmacologicalName     PharmacologicalName @relation(fields: [id_pharmacological_name], references: [id])
  id_pharmacological_form Int
  PharmacologicalForm     PharmacologicalForm @relation(fields: [id_pharmacological_form], references: [id])
  created_at              DateTime            @default(now())
  updated_at              DateTime?           @updatedAt
  Prescription            Prescription[]
}

model MedicationSheet {
  id            Int            @id @default(autoincrement())
  residentId    Int
  Resident      Resident       @relation(fields: [residentId], references: [id])
  prescriptions Prescription[]
  createdBy     Int
  Employee      Employee       @relation(fields: [createdBy], references: [id])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime?      @updatedAt
  observations  String?
}

model Prescription {
  id                Int             @id @default(autoincrement())
  medicationSheetId Int
  MedicationSheet   MedicationSheet @relation(fields: [medicationSheetId], references: [id])
  medicineId        Int
  Medicine          Medicine        @relation(fields: [medicineId], references: [id])
  dosage            String
  frequency         String
  startDate         DateTime
  endDate           DateTime
  firstTime         String // "HH:mm"
  createdAt         DateTime        @default(now())
  updatedAt         DateTime?       @updatedAt
}

model Product {
  id                    Int                    @id @default(autoincrement())
  name                  String
  quantity              Int
  created_at            DateTime               @default(now())
  updated_at            DateTime?              @updatedAt
  measurement           MeasurementType
  ProductMovimentations ProductMovimentation[]
}

model Movimentation {
  id                    Int                    @id @default(autoincrement())
  type                  MovimentationType
  created_at            DateTime               @default(now())
  updated_at            DateTime?              @updatedAt
  id_employee           Int
  Employee              Employee               @relation(fields: [id_employee], references: [id])
  ProductMovimentations ProductMovimentation[]
}

model ProductMovimentation {
  id               Int           @id @default(autoincrement())
  id_product       Int
  Product          Product       @relation(fields: [id_product], references: [id])
  id_movimentation Int
  Movimentation    Movimentation @relation(fields: [id_movimentation], references: [id])
  quantity         Int
  created_at       DateTime      @default(now())
  updated_at       DateTime?     @updatedAt
}

model Screening {
  id                      Int          @id @default(autoincrement())
  religion                String
  smoking                 Boolean
  entry_date              DateTime
  father_name             String
  mother_name             String
  source_of_income        String
  income                  Float
  health_insurance        String
  funeral_insurance       String
  number_of_sibling       Int
  number_of_children      Int
  number_of_grandchildren Int
  id_resident             Int          @unique
  Resident                Resident     @relation(fields: [id_resident], references: [id])
  Responsible             Responsible?
  Illnesses               Illnesses[]
  SpecialNeeds            SpecialNeeds[]
}

model Responsible {
  id           Int       @id @default(autoincrement())
  name         String
  kinship      String
  phone        String
  civil_state  String
  profession   String
  address      String
  number       String
  city         String
  state        String
  neighborhood String
  zip_code     String
  id_screening Int       @unique
  Screening    Screening @relation(fields: [id_screening], references: [id])
}

model Illnesses {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  Screening  Screening[] 
}

model SpecialNeeds {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  Screening   Screening[] 
}

model Accompaniment {
  id          Int        @id @default(autoincrement())
  date        DateTime   @default(now())
  description String
  employeeId  Int        
  residentId  Int
  type        AccompanimentType
  Employee    Employee   @relation(fields: [employeeId], references: [id])
  Resident    Resident   @relation(fields: [residentId], references: [id])
  updated_at       DateTime?     @updatedAt
}

enum MovimentationType {
  INPUT
  OUTPUT
}

enum MeasurementType {
  UNITY
  KG
  L
}

enum AccompanimentType {
  PSYCHOLOGIST
  PHYSIOTHERAPIST
  NUTRITIONIST
}
